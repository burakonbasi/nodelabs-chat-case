# docker-compose.yml
version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: nodelabs-chat-app
    restart: unless-stopped
    env_file: .env
    ports:
      - "3000:3000"
    volumes:
      - ./src:/usr/src/app/src
      - ./logs:/usr/src/app/logs
      - /usr/src/app/node_modules
    depends_on:
      - mongodb
      - redis
      - rabbitmq
      - elasticsearch
    networks:
      - nodelabs-network

  mongodb:
    image: mongo:7
    container_name: nodelabs-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    environment:
      MONGO_INITDB_DATABASE: nodelabs-chat
    networks:
      - nodelabs-network

  redis:
    image: redis:7-alpine
    container_name: nodelabs-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - nodelabs-network

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: nodelabs-rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - nodelabs-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: nodelabs-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - nodelabs-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: nodelabs-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'
    depends_on:
      - elasticsearch
    networks:
      - nodelabs-network

volumes:
  mongodb_data:
  redis_data:
  rabbitmq_data:
  elasticsearch_data:

networks:
  nodelabs-network:
    driver: bridge

# docker-compose.prod.yml
version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: nodelabs-chat-app
    restart: always
    env_file: .env.production
    ports:
      - "3000:3000"
    depends_on:
      - mongodb
      - redis
      - rabbitmq
    networks:
      - nodelabs-network
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"